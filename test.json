{
	"info": {
		"_postman_id": "807f31d4-357a-4aa3-86e9-48617cd058c2",
		"name": "PINP API",
		"description": "Put It In Park API.\nBase URL: api.putitinpark.xyz/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Models",
			"item": [
				{
					"name": "Locations",
					"item": [
						{
							"name": "Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "719adf3d-678d-4da6-9daf-c445d16fe949",
										"exec": [
											"pm.test(\"Server status is 200\", function() {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"pm.test(\"JSON contains required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"num_results\");",
											"    pm.expect(jsonData).to.have.property(\"page\");",
											"    pm.expect(jsonData).to.have.property(\"total_pages\");",
											"    for (let i = 0; i < jsonData.objects.length; i++){",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"fips\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"imglink\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"mail_code\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"name\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"num_parks\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"numrec\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"park_names\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"pop\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"rec_ids\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/location",
									"host": [
										"{{url}}"
									],
									"path": [
										"location"
									]
								},
								"description": "Returns a list of all 50 states\n\nInstances of a state include: \nfips, imglink, mail_code (abbreviated state name), name, num_parks, numrec, park_names, pop, and rec_ids."
							},
							"response": []
						}
					],
					"description": "Locations models",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Parks",
					"item": [
						{
							"name": "Parks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c813792-477c-49a5-81fa-9ed40b7d25dd",
										"exec": [
											"pm.test(\"Server status is 200\", function() {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"pm.test(\"JSON contains required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"num_results\");",
											"    pm.expect(jsonData).to.have.property(\"page\");",
											"    pm.expect(jsonData).to.have.property(\"total_pages\");",
											"    for (let i = 0; i < jsonData.objects.length; i++){",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"description\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"fee\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"imglink\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"lat\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"location\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"lon\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"num_rec\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"park_code\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"park_id\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"park_name\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"rec_ids\");",
											"        pm.expect(jsonData.objects[i]).to.have.property(\"visitors\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/nationalparks",
									"host": [
										"{{url}}"
									],
									"path": [
										"nationalparks"
									]
								},
								"description": "Returns a list of all national parks.\n\nInstances of a park include:\ndescription, fee, imglink, lat, location, lon, num_rec, park_code, park_id, park_name, rec_ids, and visitors"
							},
							"response": []
						},
						{
							"name": "Sort Parks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ul}}/parks?sort=name",
									"host": [
										"{{ul}}"
									],
									"path": [
										"parks"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Sort parks based on name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter Parks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								},
								"description": "Filters parks based on key and value match."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Recreation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/recreation",
							"host": [
								"{{url}}"
							],
							"path": [
								"recreation"
							]
						},
						"description": "Returns a list of all recreations.\n\nInstances of a recreation include: \nactivities, description, imglink, lat, location, lon, natpark, num_activities, par _org_id, rec_id, rec_name, reservable, stay_limit"
					},
					"response": []
				}
			],
			"description": "Category encompassing multiple instances of the model's type.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4f433974-83d3-4ee0-8d84-7f7c1fb7c28f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b012f0ed-0c03-4503-9efb-b88fdba8b8c7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Instances",
			"item": [
				{
					"name": "Park Instance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/parks?id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"parks"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Returns a specific park given park id."
					},
					"response": []
				},
				{
					"name": "Recreation Instance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/recreation?id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"recreation"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Returns a specific recreation given recreation id."
					},
					"response": []
				},
				{
					"name": "Location Instance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/state?id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"state"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Returns a specific location given state name."
					},
					"response": []
				}
			],
			"description": "Individual instance of a model.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Available",
			"item": [
				{
					"name": "Parks Available",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/parks?recreation_id=&state_id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"parks"
							],
							"query": [
								{
									"key": "recreation_id",
									"value": ""
								},
								{
									"key": "state_id",
									"value": ""
								}
							]
						},
						"description": "Returns list of available parks with specified recreation by recreation id and specified state by location id."
					},
					"response": []
				},
				{
					"name": "Recreations Available",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/recreation?park_id=&state_id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"recreation"
							],
							"query": [
								{
									"key": "park_id",
									"value": ""
								},
								{
									"key": "state_id",
									"value": ""
								}
							]
						},
						"description": "Returns list of available recreations with specified park by park id and specified state by location id."
					},
					"response": []
				},
				{
					"name": "Locations Available",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/states?park_id=&recreation_id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"states"
							],
							"query": [
								{
									"key": "park_id",
									"value": ""
								},
								{
									"key": "recreation_id",
									"value": ""
								}
							]
						},
						"description": "Returns list of available states with specified park by park id and specified recreation by recreation id."
					},
					"response": []
				}
			],
			"description": "Returns lists of available parks/recreation/states from given parks/recreation/states id.",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e2ea4275-0995-4e1a-a37f-023246eeacc9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e60b7885-5e35-4de4-a294-b5be06e5f4dc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}